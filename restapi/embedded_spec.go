// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for managing digital certificates issued by a Certificate Authority (CA).",
    "title": "Certificate Authority API",
    "version": "1.0.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/certificates": {
      "post": {
        "description": "Request the issuance of a new digital certificate.",
        "summary": "Issue a new certificate",
        "operationId": "issueCertificate",
        "parameters": [
          {
            "name": "certificateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Certificate issued successfully",
            "schema": {
              "$ref": "#/definitions/Certificate"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/certificates/{certificateId}": {
      "get": {
        "description": "Retrieve the status and details of a specific certificate.",
        "summary": "Get certificate status",
        "operationId": "getCertificate",
        "parameters": [
          {
            "type": "string",
            "name": "certificateId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of certificate data",
            "schema": {
              "$ref": "#/definitions/Certificate"
            }
          },
          "404": {
            "description": "Certificate not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "description": "Revoke a specific certificate.",
        "summary": "Revoke a certificate",
        "operationId": "revokeCertificate",
        "parameters": [
          {
            "type": "string",
            "name": "certificateId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Certificate revoked successfully"
          },
          "404": {
            "description": "Certificate not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/certificates/{certificateId}/pfx": {
      "get": {
        "description": "Retrieve pxf bundle for generated certificates",
        "produces": [
          "application/octet-stream"
        ],
        "summary": "Get certificate pfx",
        "operationId": "getPFX",
        "parameters": [
          {
            "type": "string",
            "name": "certificateId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Request processed",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "Certificate not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/crl.crl": {
      "get": {
        "description": "Provide the latest CRL",
        "produces": [
          "application/octet-stream"
        ],
        "summary": "Request a latest CRL",
        "operationId": "requestCRL",
        "responses": {
          "200": {
            "description": "Request processed",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/requests": {
      "post": {
        "description": "Request the issuance of a new digital certificate.",
        "summary": "Request a new certificate",
        "operationId": "requestCertificate",
        "parameters": [
          {
            "name": "certificateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Certificate requested successfully",
            "schema": {
              "$ref": "#/definitions/CertificateRequest"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/requests/{requestId}": {
      "get": {
        "description": "Request the issuance of a new digital certificate.",
        "summary": "Issue certificate on request",
        "operationId": "signRequest",
        "parameters": [
          {
            "type": "string",
            "name": "requestId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Request processed"
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "definitions": {
    "CRL": {
      "type": "object",
      "required": [
        "raw"
      ],
      "properties": {
        "raw": {
          "description": "BASE64(DER) encoded CRL",
          "type": "string"
        }
      }
    },
    "Certificate": {
      "type": "object",
      "properties": {
        "aki": {
          "description": "Authority Key ID",
          "type": "string"
        },
        "bundle": {
          "description": "Certificate bundle",
          "type": "string"
        },
        "certificateId": {
          "description": "Unique identifier for the certificate.",
          "type": "string"
        },
        "expiresOn": {
          "description": "Expiration date of the certificate.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "PubKey hash",
          "type": "string"
        },
        "issuedOn": {
          "description": "Date and time the certificate was issued.",
          "type": "string",
          "format": "date-time"
        },
        "pem": {
          "description": "PEM encoding",
          "type": "string"
        },
        "pfx": {
          "description": "PFX container with cert,bundle and key",
          "type": "string"
        },
        "pfxpwd": {
          "description": "PFX container pwd",
          "type": "string"
        },
        "req": {
          "description": "Certificate Request",
          "type": "string"
        },
        "secretkey": {
          "description": "Private key for generated certificates",
          "type": "string"
        },
        "serial": {
          "description": "Certificate Serial",
          "type": "string"
        },
        "status": {
          "description": "Current status of the certificate (e.g., active, revoked).",
          "type": "string"
        },
        "subject": {
          "description": "Name of the entity the certificate is issued to.",
          "type": "string"
        }
      }
    },
    "CertificateRequest": {
      "type": "object",
      "required": [
        "cn",
        "type",
        "template"
      ],
      "properties": {
        "cn": {
          "description": "CN for autoissuer",
          "type": "string"
        },
        "id": {
          "description": "PubKey hash",
          "type": "string"
        },
        "publicKey": {
          "description": "Public key to be associated with the certificate.",
          "type": "string"
        },
        "raw": {
          "description": "Raw request as string",
          "type": "string"
        },
        "san": {
          "description": "Subject Alternative Names (SAN) for server certificates",
          "type": "string"
        },
        "subject": {
          "description": "Name of the entity requesting the certificate.",
          "type": "string"
        },
        "template": {
          "description": "Which template to use for certificate",
          "type": "string"
        },
        "type": {
          "description": "Type of the crt",
          "type": "string"
        }
      }
    },
    "PFX": {
      "type": "object",
      "required": [
        "raw"
      ],
      "properties": {
        "raw": {
          "description": "PFX",
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "API for managing digital certificates issued by a Certificate Authority (CA).",
    "title": "Certificate Authority API",
    "version": "1.0.0"
  },
  "basePath": "/api/v1",
  "paths": {
    "/certificates": {
      "post": {
        "description": "Request the issuance of a new digital certificate.",
        "summary": "Issue a new certificate",
        "operationId": "issueCertificate",
        "parameters": [
          {
            "name": "certificateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Certificate issued successfully",
            "schema": {
              "$ref": "#/definitions/Certificate"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/certificates/{certificateId}": {
      "get": {
        "description": "Retrieve the status and details of a specific certificate.",
        "summary": "Get certificate status",
        "operationId": "getCertificate",
        "parameters": [
          {
            "type": "string",
            "name": "certificateId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful retrieval of certificate data",
            "schema": {
              "$ref": "#/definitions/Certificate"
            }
          },
          "404": {
            "description": "Certificate not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "delete": {
        "description": "Revoke a specific certificate.",
        "summary": "Revoke a certificate",
        "operationId": "revokeCertificate",
        "parameters": [
          {
            "type": "string",
            "name": "certificateId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Certificate revoked successfully"
          },
          "404": {
            "description": "Certificate not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/certificates/{certificateId}/pfx": {
      "get": {
        "description": "Retrieve pxf bundle for generated certificates",
        "produces": [
          "application/octet-stream"
        ],
        "summary": "Get certificate pfx",
        "operationId": "getPFX",
        "parameters": [
          {
            "type": "string",
            "name": "certificateId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Request processed",
            "schema": {
              "type": "file"
            }
          },
          "404": {
            "description": "Certificate not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/crl.crl": {
      "get": {
        "description": "Provide the latest CRL",
        "produces": [
          "application/octet-stream"
        ],
        "summary": "Request a latest CRL",
        "operationId": "requestCRL",
        "responses": {
          "200": {
            "description": "Request processed",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/requests": {
      "post": {
        "description": "Request the issuance of a new digital certificate.",
        "summary": "Request a new certificate",
        "operationId": "requestCertificate",
        "parameters": [
          {
            "name": "certificateRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Certificate requested successfully",
            "schema": {
              "$ref": "#/definitions/CertificateRequest"
            }
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/requests/{requestId}": {
      "get": {
        "description": "Request the issuance of a new digital certificate.",
        "summary": "Issue certificate on request",
        "operationId": "signRequest",
        "parameters": [
          {
            "type": "string",
            "name": "requestId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Request processed"
          },
          "400": {
            "description": "Invalid request"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  },
  "definitions": {
    "CRL": {
      "type": "object",
      "required": [
        "raw"
      ],
      "properties": {
        "raw": {
          "description": "BASE64(DER) encoded CRL",
          "type": "string"
        }
      }
    },
    "Certificate": {
      "type": "object",
      "properties": {
        "aki": {
          "description": "Authority Key ID",
          "type": "string"
        },
        "bundle": {
          "description": "Certificate bundle",
          "type": "string"
        },
        "certificateId": {
          "description": "Unique identifier for the certificate.",
          "type": "string"
        },
        "expiresOn": {
          "description": "Expiration date of the certificate.",
          "type": "string",
          "format": "date-time"
        },
        "id": {
          "description": "PubKey hash",
          "type": "string"
        },
        "issuedOn": {
          "description": "Date and time the certificate was issued.",
          "type": "string",
          "format": "date-time"
        },
        "pem": {
          "description": "PEM encoding",
          "type": "string"
        },
        "pfx": {
          "description": "PFX container with cert,bundle and key",
          "type": "string"
        },
        "pfxpwd": {
          "description": "PFX container pwd",
          "type": "string"
        },
        "req": {
          "description": "Certificate Request",
          "type": "string"
        },
        "secretkey": {
          "description": "Private key for generated certificates",
          "type": "string"
        },
        "serial": {
          "description": "Certificate Serial",
          "type": "string"
        },
        "status": {
          "description": "Current status of the certificate (e.g., active, revoked).",
          "type": "string"
        },
        "subject": {
          "description": "Name of the entity the certificate is issued to.",
          "type": "string"
        }
      }
    },
    "CertificateRequest": {
      "type": "object",
      "required": [
        "cn",
        "type",
        "template"
      ],
      "properties": {
        "cn": {
          "description": "CN for autoissuer",
          "type": "string"
        },
        "id": {
          "description": "PubKey hash",
          "type": "string"
        },
        "publicKey": {
          "description": "Public key to be associated with the certificate.",
          "type": "string"
        },
        "raw": {
          "description": "Raw request as string",
          "type": "string"
        },
        "san": {
          "description": "Subject Alternative Names (SAN) for server certificates",
          "type": "string"
        },
        "subject": {
          "description": "Name of the entity requesting the certificate.",
          "type": "string"
        },
        "template": {
          "description": "Which template to use for certificate",
          "type": "string"
        },
        "type": {
          "description": "Type of the crt",
          "type": "string"
        }
      }
    },
    "PFX": {
      "type": "object",
      "required": [
        "raw"
      ],
      "properties": {
        "raw": {
          "description": "PFX",
          "type": "string"
        }
      }
    }
  }
}`))
}

// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SignRequestHandlerFunc turns a function with the right signature into a sign request handler
type SignRequestHandlerFunc func(SignRequestParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SignRequestHandlerFunc) Handle(params SignRequestParams) middleware.Responder {
	return fn(params)
}

// SignRequestHandler interface for that can handle valid sign request params
type SignRequestHandler interface {
	Handle(SignRequestParams) middleware.Responder
}

// NewSignRequest creates a new http.Handler for the sign request operation
func NewSignRequest(ctx *middleware.Context, handler SignRequestHandler) *SignRequest {
	return &SignRequest{Context: ctx, Handler: handler}
}

/*
	SignRequest swagger:route GET /requests/{requestId} signRequest

# Issue certificate on request

Request the issuance of a new digital certificate.
*/
type SignRequest struct {
	Context *middleware.Context
	Handler SignRequestHandler
}

func (o *SignRequest) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSignRequestParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

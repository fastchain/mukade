// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetPFXHandlerFunc turns a function with the right signature into a get p f x handler
type GetPFXHandlerFunc func(GetPFXParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPFXHandlerFunc) Handle(params GetPFXParams) middleware.Responder {
	return fn(params)
}

// GetPFXHandler interface for that can handle valid get p f x params
type GetPFXHandler interface {
	Handle(GetPFXParams) middleware.Responder
}

// NewGetPFX creates a new http.Handler for the get p f x operation
func NewGetPFX(ctx *middleware.Context, handler GetPFXHandler) *GetPFX {
	return &GetPFX{Context: ctx, Handler: handler}
}

/*
	GetPFX swagger:route GET /certificates/{certificateId}/pfx getPFX

# Get certificate pfx

Retrieve pxf bundle for generated certificates
*/
type GetPFX struct {
	Context *middleware.Context
	Handler GetPFXHandler
}

func (o *GetPFX) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetPFXParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

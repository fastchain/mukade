// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// RequestCRLHandlerFunc turns a function with the right signature into a request c r l handler
type RequestCRLHandlerFunc func(RequestCRLParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RequestCRLHandlerFunc) Handle(params RequestCRLParams) middleware.Responder {
	return fn(params)
}

// RequestCRLHandler interface for that can handle valid request c r l params
type RequestCRLHandler interface {
	Handle(RequestCRLParams) middleware.Responder
}

// NewRequestCRL creates a new http.Handler for the request c r l operation
func NewRequestCRL(ctx *middleware.Context, handler RequestCRLHandler) *RequestCRL {
	return &RequestCRL{Context: ctx, Handler: handler}
}

/*RequestCRL swagger:route GET /crl.crl requestCRL

Request a latest CRL

Provide the latest CRL

*/
type RequestCRL struct {
	Context *middleware.Context
	Handler RequestCRLHandler
}

func (o *RequestCRL) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRequestCRLParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

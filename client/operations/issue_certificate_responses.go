// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/fastchain/mukade/models"
)

// IssueCertificateReader is a Reader for the IssueCertificate structure.
type IssueCertificateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *IssueCertificateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewIssueCertificateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewIssueCertificateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewIssueCertificateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewIssueCertificateOK creates a IssueCertificateOK with default headers values
func NewIssueCertificateOK() *IssueCertificateOK {
	return &IssueCertificateOK{}
}

/*IssueCertificateOK handles this case with default header values.

Certificate issued successfully
*/
type IssueCertificateOK struct {
	Payload *models.Certificate
}

func (o *IssueCertificateOK) Error() string {
	return fmt.Sprintf("[POST /certificates][%d] issueCertificateOK  %+v", 200, o.Payload)
}

func (o *IssueCertificateOK) GetPayload() *models.Certificate {
	return o.Payload
}

func (o *IssueCertificateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Certificate)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewIssueCertificateBadRequest creates a IssueCertificateBadRequest with default headers values
func NewIssueCertificateBadRequest() *IssueCertificateBadRequest {
	return &IssueCertificateBadRequest{}
}

/*IssueCertificateBadRequest handles this case with default header values.

Invalid request
*/
type IssueCertificateBadRequest struct {
}

func (o *IssueCertificateBadRequest) Error() string {
	return fmt.Sprintf("[POST /certificates][%d] issueCertificateBadRequest ", 400)
}

func (o *IssueCertificateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewIssueCertificateInternalServerError creates a IssueCertificateInternalServerError with default headers values
func NewIssueCertificateInternalServerError() *IssueCertificateInternalServerError {
	return &IssueCertificateInternalServerError{}
}

/*IssueCertificateInternalServerError handles this case with default header values.

Internal server error
*/
type IssueCertificateInternalServerError struct {
}

func (o *IssueCertificateInternalServerError) Error() string {
	return fmt.Sprintf("[POST /certificates][%d] issueCertificateInternalServerError ", 500)
}

func (o *IssueCertificateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetCertificate(params *GetCertificateParams, opts ...ClientOption) (*GetCertificateOK, error)

	IssueCertificate(params *IssueCertificateParams, opts ...ClientOption) (*IssueCertificateOK, error)

	RequestCRL(params *RequestCRLParams, writer io.Writer, opts ...ClientOption) (*RequestCRLOK, error)

	RequestCertificate(params *RequestCertificateParams, opts ...ClientOption) (*RequestCertificateOK, error)

	RevokeCertificate(params *RevokeCertificateParams, opts ...ClientOption) (*RevokeCertificateOK, error)

	SignRequest(params *SignRequestParams, opts ...ClientOption) (*SignRequestOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetCertificate gets certificate status

Retrieve the status and details of a specific certificate.
*/
func (a *Client) GetCertificate(params *GetCertificateParams, opts ...ClientOption) (*GetCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCertificate",
		Method:             "GET",
		PathPattern:        "/certificates/{certificateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
IssueCertificate issues a new certificate

Request the issuance of a new digital certificate.
*/
func (a *Client) IssueCertificate(params *IssueCertificateParams, opts ...ClientOption) (*IssueCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewIssueCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "issueCertificate",
		Method:             "POST",
		PathPattern:        "/certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &IssueCertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*IssueCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for issueCertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RequestCRL requests a latest c r l

Provide the latest CRL
*/
func (a *Client) RequestCRL(params *RequestCRLParams, writer io.Writer, opts ...ClientOption) (*RequestCRLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestCRLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "requestCRL",
		Method:             "GET",
		PathPattern:        "/crl.crl",
		ProducesMediaTypes: []string{"application/octet-stream"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RequestCRLReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RequestCRLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for requestCRL: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RequestCertificate requests a new certificate

Request the issuance of a new digital certificate.
*/
func (a *Client) RequestCertificate(params *RequestCertificateParams, opts ...ClientOption) (*RequestCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRequestCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "requestCertificate",
		Method:             "POST",
		PathPattern:        "/requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RequestCertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RequestCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for requestCertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
RevokeCertificate revokes a certificate

Revoke a specific certificate.
*/
func (a *Client) RevokeCertificate(params *RevokeCertificateParams, opts ...ClientOption) (*RevokeCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRevokeCertificateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "revokeCertificate",
		Method:             "DELETE",
		PathPattern:        "/certificates/{certificateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RevokeCertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RevokeCertificateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for revokeCertificate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SignRequest issues certificate on request

Request the issuance of a new digital certificate.
*/
func (a *Client) SignRequest(params *SignRequestParams, opts ...ClientOption) (*SignRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSignRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "signRequest",
		Method:             "GET",
		PathPattern:        "/requests/{requestId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SignRequestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SignRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for signRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

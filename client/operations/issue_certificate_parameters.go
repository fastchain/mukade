// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/fastchain/mukade/models"
)

// NewIssueCertificateParams creates a new IssueCertificateParams object
// with the default values initialized.
func NewIssueCertificateParams() *IssueCertificateParams {
	var ()
	return &IssueCertificateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewIssueCertificateParamsWithTimeout creates a new IssueCertificateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewIssueCertificateParamsWithTimeout(timeout time.Duration) *IssueCertificateParams {
	var ()
	return &IssueCertificateParams{

		timeout: timeout,
	}
}

// NewIssueCertificateParamsWithContext creates a new IssueCertificateParams object
// with the default values initialized, and the ability to set a context for a request
func NewIssueCertificateParamsWithContext(ctx context.Context) *IssueCertificateParams {
	var ()
	return &IssueCertificateParams{

		Context: ctx,
	}
}

// NewIssueCertificateParamsWithHTTPClient creates a new IssueCertificateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewIssueCertificateParamsWithHTTPClient(client *http.Client) *IssueCertificateParams {
	var ()
	return &IssueCertificateParams{
		HTTPClient: client,
	}
}

/*IssueCertificateParams contains all the parameters to send to the API endpoint
for the issue certificate operation typically these are written to a http.Request
*/
type IssueCertificateParams struct {

	/*CertificateRequest*/
	CertificateRequest *models.CertificateRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the issue certificate params
func (o *IssueCertificateParams) WithTimeout(timeout time.Duration) *IssueCertificateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the issue certificate params
func (o *IssueCertificateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the issue certificate params
func (o *IssueCertificateParams) WithContext(ctx context.Context) *IssueCertificateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the issue certificate params
func (o *IssueCertificateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the issue certificate params
func (o *IssueCertificateParams) WithHTTPClient(client *http.Client) *IssueCertificateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the issue certificate params
func (o *IssueCertificateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCertificateRequest adds the certificateRequest to the issue certificate params
func (o *IssueCertificateParams) WithCertificateRequest(certificateRequest *models.CertificateRequest) *IssueCertificateParams {
	o.SetCertificateRequest(certificateRequest)
	return o
}

// SetCertificateRequest adds the certificateRequest to the issue certificate params
func (o *IssueCertificateParams) SetCertificateRequest(certificateRequest *models.CertificateRequest) {
	o.CertificateRequest = certificateRequest
}

// WriteToRequest writes these params to a swagger request
func (o *IssueCertificateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CertificateRequest != nil {
		if err := r.SetBodyParam(o.CertificateRequest); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
